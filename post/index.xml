<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 莫小白的技术博客</title>
    <link>https://momobaba.top/post/</link>
    <description>Recent content in Posts on 莫小白的技术博客</description>
    <image>
      <url>https://momobaba.top/papermod-cover.png</url>
      <link>https://momobaba.top/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 12 Jan 2024 22:00:36 +0800</lastBuildDate><atom:link href="https://momobaba.top/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goreplay流量录制和回放</title>
      <link>https://momobaba.top/post/goreplay/</link>
      <pubDate>Fri, 12 Jan 2024 22:00:36 +0800</pubDate>
      
      <guid>https://momobaba.top/post/goreplay/</guid>
      <description>&lt;p&gt;日常大部分的测试工作都是在测试环境下，通过模拟用户的行为来对系统进行验证，但是线下模拟场景有限，会出现业务覆盖不全的情况，通过把线上的真实流量复制到线下环境，解决测试环境模拟不够真实，或覆盖不够全面的问题。通过调研，决定用GoReplay + Diffy开源工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>前端Nextjs和Nuxtjs框架学习</title>
      <link>https://momobaba.top/post/nextjs-nuxtjs/</link>
      <pubDate>Tue, 12 Dec 2023 20:59:57 +0800</pubDate>
      
      <guid>https://momobaba.top/post/nextjs-nuxtjs/</guid>
      <description>&lt;p&gt;最近花了一个月时间学习了前端Vue和React，Vue用的nuxtjs框架，React用的nextjs框架；做了一个简单的商城，包含谷歌登录和支付功能，支付对接了paypal和stripe。
掌握一门语言或者框架，最快的方式还是实战。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChaosBlade故障模拟</title>
      <link>https://momobaba.top/post/chaosblade/</link>
      <pubDate>Sun, 30 Jul 2023 19:47:43 +0800</pubDate>
      
      <guid>https://momobaba.top/post/chaosblade/</guid>
      <description>&lt;p&gt;线上网络很复杂，经常会出现波动，延迟，无法访问，各种异常情况。这些场景，我们在开发阶段经常容易忽略。如果程序不考虑这些异常，会导致我们程序不能按照预期执行或者会出现服务阻塞不可用。
比如：没有设置mysql读写超时时间；消息队列服务异常，我们需要保障数据不丢失；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gitlab Devops CICD</title>
      <link>https://momobaba.top/post/gitlab-devops-cicd/</link>
      <pubDate>Thu, 13 Jul 2023 18:40:32 +0800</pubDate>
      
      <guid>https://momobaba.top/post/gitlab-devops-cicd/</guid>
      <description>&lt;p&gt;GitLab 是一个强大的开源代码托管平台，它还提供了一套完整的 CI/CD（持续集成/持续交付）工具，称为 GitLab CI/CD。通过 GitLab CI/CD，您可以实现自动化的构建、测试和部署流程，以帮助加快软件交付速度和质量。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>本地文本日志通过filebeat写入到ES</title>
      <link>https://momobaba.top/post/log-filebeat-kafka-es/</link>
      <pubDate>Sat, 07 Jan 2023 20:41:58 +0800</pubDate>
      
      <guid>https://momobaba.top/post/log-filebeat-kafka-es/</guid>
      <description>&lt;p&gt;需求背景：在Kibana能够方便查询服务端程序记录的日志，考虑到公司技术栈多样性，有java、php、golang、python、lua等等。我们采用的方案是程序写本地日志，然后通过Filebeat
上报到Kafka，最后把kafka数据消费写入到Elasticsearch。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Kafka示例代码</title>
      <link>https://momobaba.top/post/go-kafaka/</link>
      <pubDate>Mon, 02 Jan 2023 20:32:05 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-kafaka/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;Go Kafka 示例代码, 使用&lt;a href=&#34;https://github.com/segmentio/kafka-go&#34; target=&#34;_blank&#34;&gt;github.com/streadway/amqp&lt;/a&gt;库, 包含生产和消费示例代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kafka介绍以及常见问题总结</title>
      <link>https://momobaba.top/post/kafka/</link>
      <pubDate>Mon, 26 Dec 2022 21:31:04 +0800</pubDate>
      
      <guid>https://momobaba.top/post/kafka/</guid>
      <description>&lt;h2 id=&#34;kafka介绍&#34;&gt;Kafka介绍&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://momobaba.top/img/kafka-info.png&#34; alt=&#34;kafka介绍&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka 比较重要的几个概念：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Producer（生产者） : 产生消息的一方。&lt;/li&gt;
&lt;li&gt;Consumer（消费者） : 消费消息的一方。&lt;/li&gt;
&lt;li&gt;Broker（代理） : 可以看作是一个独立的 Kafka 实例。多个 Kafka Broker 组成一个 Kafka Cluster。每个 Broker 中又包含了 Topic 以及 Partition&lt;/li&gt;
&lt;li&gt;Topic（主题） : Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic(主题) 来消费消息。&lt;/li&gt;
&lt;li&gt;Partition（分区） : Partition 属于 Topic 的一部分。一个 Topic 可以有多个 Partition ，并且同一 Topic 下的 Partition 可以分布在不同的 Broker 上，这也就表明一个 Topic 可以横跨多个 Broker&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kafka-如何保证消息不丢失&#34;&gt;Kafka 如何保证消息不丢失&lt;/h2&gt;
&lt;h3 id=&#34;生产者丢失消息的情况&#34;&gt;生产者丢失消息的情况&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;生产者(Producer) 调用send方法发送消息之后，消息可能因为网络问题并没有发送过去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;最佳实践&#34;&gt;最佳实践&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用 producer.send(msg, callback)。带有回调通知的 send 方法可以针对发送失败的消息进行重试处理&lt;/li&gt;
&lt;li&gt;设置 acks = all，如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”&lt;/li&gt;
&lt;li&gt;设置 retries = 3，当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries &amp;gt; 0 的 Producer 能够自动重试消息发送，避免消息丢失&lt;/li&gt;
&lt;li&gt;设置 retry.backoff.ms = 300，合理估算重试的时间间隔，可以避免无效的频繁重试&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;消费者丢失消息的情况&#34;&gt;消费者丢失消息的情况&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;处理消息异常导致失败，并且提交了偏移量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;最佳实践-1&#34;&gt;最佳实践&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;确保消息消费完成再提交，设置成 enable.auto.commit = false，并采用手动提交位移的方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kafka-如何保证消息不重复消费&#34;&gt;Kafka 如何保证消息不重复消费&lt;/h2&gt;
&lt;h3 id=&#34;kafka出现消息重复消费的原因&#34;&gt;kafka出现消息重复消费的原因&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;服务端侧已经消费的数据没有成功提交 offset&lt;/li&gt;
&lt;li&gt;Kafka 侧 由于服务端处理业务时间长或者网络链接等等原因让 Kafka 认为服务假死，触发了分区 rebalance&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;最佳实践-2&#34;&gt;最佳实践&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;消费消息服务做幂等校验&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kafka消费组&#34;&gt;Kafka消费组&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;为了提升Kafka消费者服务的性能，需要为Topic多分几个分区，然后使用消费者组(Consumer Group)去消费者topic&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Rabbitmq 示例代码</title>
      <link>https://momobaba.top/post/go-rabbitmq/</link>
      <pubDate>Sat, 17 Dec 2022 21:30:38 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-rabbitmq/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;Go Rabbitmq 示例代码, 使用github.com/streadway/amqp库, 包含生产和消费示例代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Etcd部署以及以及应用</title>
      <link>https://momobaba.top/post/etcd/</link>
      <pubDate>Sun, 11 Dec 2022 18:15:43 +0800</pubDate>
      
      <guid>https://momobaba.top/post/etcd/</guid>
      <description>&lt;p&gt;etcd 是一个高可用强一致性的键值仓库在很多分布式系统架构中得到了广泛的应用，其最经典的使用场景就是服务发现。etcd 中应该尽量只存储系统中服务的配置信息，对于应用数据只推荐把数据量很小，但是更新和访问频次都很高的数据存储在 etcd 中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang pprof性能分析</title>
      <link>https://momobaba.top/post/golang-pprof/</link>
      <pubDate>Sun, 27 Nov 2022 21:28:51 +0800</pubDate>
      
      <guid>https://momobaba.top/post/golang-pprof/</guid>
      <description>&lt;p&gt;pprof 是 golang 官方提供的性能调优分析工具，可以对程序进行性能分析，并可视化数据，看起来相当的直观。
当你的 go 程序遇到性能瓶颈时，可以使用这个工具来进行调试并优化程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RabbitMQ 交换器常用三种类型介绍</title>
      <link>https://momobaba.top/post/rabbitmq-exchange/</link>
      <pubDate>Mon, 21 Nov 2022 15:30:17 +0800</pubDate>
      
      <guid>https://momobaba.top/post/rabbitmq-exchange/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;RabbitMQ 交换器常用三种类型介绍：direct: (默认)直接交换器；fanout: 广播式交换器； topic:  主题交换器&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx限制国家访问</title>
      <link>https://momobaba.top/post/nginx-restricts-country-access/</link>
      <pubDate>Tue, 08 Nov 2022 09:05:52 +0800</pubDate>
      
      <guid>https://momobaba.top/post/nginx-restricts-country-access/</guid>
      <description>&lt;p&gt;限制某个国家访问或者只允许某个国家访问我们的服务，有两种做法，一种是在Ningx里面限制，一种是在程序里面限制；程序里面下载GeoLite2-Country.mmdb库，实现很简单。今天主要讲
nginx中如何实现&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt配置免费证书</title>
      <link>https://momobaba.top/post/free-https/</link>
      <pubDate>Sun, 23 Oct 2022 16:25:03 +0800</pubDate>
      
      <guid>https://momobaba.top/post/free-https/</guid>
      <description>&lt;p&gt;使用Let&amp;rsquo;s Encrypt配置免费证书&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何防止Go Goroutine泄露</title>
      <link>https://momobaba.top/post/go-goroutine-disclosure/</link>
      <pubDate>Wed, 12 Oct 2022 21:40:38 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-goroutine-disclosure/</guid>
      <description>&lt;p&gt;Go的并发模型虽简化了并发程序的开发难度，但如果不了解使用方法，常常会遇到goroutine泄露的问题。我们可以可以从两方面入手解决，一是预防（了解什么样的代码会产生泄露），二是监控（通过Prometheus采集metrics来监控）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prometheus&#43;Grafana监控PHP-FPM</title>
      <link>https://momobaba.top/post/php-fpm-monitor/</link>
      <pubDate>Sun, 09 Oct 2022 20:29:27 +0800</pubDate>
      
      <guid>https://momobaba.top/post/php-fpm-monitor/</guid>
      <description>&lt;p&gt;为什么要监控php-fpm的状态？ 因为php-fpm多进程模型，线上一般都是static静态进程数配置，很容易因为I/O慢导致进程全部占满，造成拒绝服务。通过Prometheus采集PHP-FPM的性能指标来监控PHP-FPM&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Go Goroutine注意事项</title>
      <link>https://momobaba.top/post/go-goroutine/</link>
      <pubDate>Sun, 25 Sep 2022 17:18:02 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-goroutine/</guid>
      <description>&lt;p&gt;Go的协程使用起来很方便，但是有有些坑需要注意: &lt;!-- raw HTML omitted --&gt;1. 使用goroutine时加上panic recovery机制，避免服务直接不可用 &lt;!-- raw HTML omitted --&gt;2. 不要创建都无法退出的goroutine，会导致goroutine 泄漏&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Restful API示例文档</title>
      <link>https://momobaba.top/post/my-first-post/</link>
      <pubDate>Thu, 15 Sep 2022 11:30:03 +0000</pubDate>
      
      <guid>https://momobaba.top/post/my-first-post/</guid>
      <description>&lt;p&gt;Restful API示例文档&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
