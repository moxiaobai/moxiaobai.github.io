<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>消息队列 on 莫小白的技术博客</title>
    <link>http://localhost:1313/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 消息队列 on 莫小白的技术博客</description>
    <image>
      <url>http://localhost:1313/papermod-cover.png</url>
      <link>http://localhost:1313/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 26 Dec 2022 21:31:04 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka介绍以及常见问题总结</title>
      <link>http://localhost:1313/post/kafka/</link>
      <pubDate>Mon, 26 Dec 2022 21:31:04 +0800</pubDate>
      
      <guid>http://localhost:1313/post/kafka/</guid>
      <description>&lt;h2 id=&#34;kafka介绍&#34;&gt;Kafka介绍&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/img/kafka-info.png&#34; alt=&#34;kafka介绍&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kafka 比较重要的几个概念：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Producer（生产者） : 产生消息的一方。&lt;/li&gt;
&lt;li&gt;Consumer（消费者） : 消费消息的一方。&lt;/li&gt;
&lt;li&gt;Broker（代理） : 可以看作是一个独立的 Kafka 实例。多个 Kafka Broker 组成一个 Kafka Cluster。每个 Broker 中又包含了 Topic 以及 Partition&lt;/li&gt;
&lt;li&gt;Topic（主题） : Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic(主题) 来消费消息。&lt;/li&gt;
&lt;li&gt;Partition（分区） : Partition 属于 Topic 的一部分。一个 Topic 可以有多个 Partition ，并且同一 Topic 下的 Partition 可以分布在不同的 Broker 上，这也就表明一个 Topic 可以横跨多个 Broker&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kafka-如何保证消息不丢失&#34;&gt;Kafka 如何保证消息不丢失&lt;/h2&gt;
&lt;h3 id=&#34;生产者丢失消息的情况&#34;&gt;生产者丢失消息的情况&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;生产者(Producer) 调用send方法发送消息之后，消息可能因为网络问题并没有发送过去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;最佳实践&#34;&gt;最佳实践&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用 producer.send(msg, callback)。带有回调通知的 send 方法可以针对发送失败的消息进行重试处理&lt;/li&gt;
&lt;li&gt;设置 acks = all，如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”&lt;/li&gt;
&lt;li&gt;设置 retries = 3，当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries &amp;gt; 0 的 Producer 能够自动重试消息发送，避免消息丢失&lt;/li&gt;
&lt;li&gt;设置 retry.backoff.ms = 300，合理估算重试的时间间隔，可以避免无效的频繁重试&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;消费者丢失消息的情况&#34;&gt;消费者丢失消息的情况&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;处理消息异常导致失败，并且提交了偏移量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;最佳实践-1&#34;&gt;最佳实践&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;确保消息消费完成再提交，设置成 enable.auto.commit = false，并采用手动提交位移的方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kafka-如何保证消息不重复消费&#34;&gt;Kafka 如何保证消息不重复消费&lt;/h2&gt;
&lt;h3 id=&#34;kafka出现消息重复消费的原因&#34;&gt;kafka出现消息重复消费的原因&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;服务端侧已经消费的数据没有成功提交 offset&lt;/li&gt;
&lt;li&gt;Kafka 侧 由于服务端处理业务时间长或者网络链接等等原因让 Kafka 认为服务假死，触发了分区 rebalance&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;最佳实践-2&#34;&gt;最佳实践&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;消费消息服务做幂等校验&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kafka消费组&#34;&gt;Kafka消费组&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;为了提升Kafka消费者服务的性能，需要为Topic多分几个分区，然后使用消费者组(Consumer Group)去消费者topic&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RabbitMQ 交换器常用三种类型介绍</title>
      <link>http://localhost:1313/post/rabbitmq-exchange/</link>
      <pubDate>Mon, 21 Nov 2022 15:30:17 +0800</pubDate>
      
      <guid>http://localhost:1313/post/rabbitmq-exchange/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;RabbitMQ 交换器常用三种类型介绍：direct: (默认)直接交换器；fanout: 广播式交换器； topic:  主题交换器&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
