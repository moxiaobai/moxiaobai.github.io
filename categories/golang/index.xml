<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on 莫小白的技术博客</title>
    <link>https://momobaba.top/categories/golang/</link>
    <description>Recent content in Golang on 莫小白的技术博客</description>
    <image>
      <url>https://momobaba.top/papermod-cover.png</url>
      <link>https://momobaba.top/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 07 Jan 2023 20:41:58 +0800</lastBuildDate><atom:link href="https://momobaba.top/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>本地文本日志通过filebeat写入到ES</title>
      <link>https://momobaba.top/post/log-filebeat-kafka-es/</link>
      <pubDate>Sat, 07 Jan 2023 20:41:58 +0800</pubDate>
      
      <guid>https://momobaba.top/post/log-filebeat-kafka-es/</guid>
      <description>&lt;p&gt;需求背景：在Kibana能够方便查询服务端程序记录的日志，考虑到公司技术栈多样性，有java、php、golang、python、lua等等。我们采用的方案是程序写本地日志，然后通过Filebeat
上报到Kafka，最后把kafka数据消费写入到Elasticsearch。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Kafka示例代码</title>
      <link>https://momobaba.top/post/go-kafaka/</link>
      <pubDate>Mon, 02 Jan 2023 20:32:05 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-kafaka/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;Go Kafka 示例代码, 使用&lt;a href=&#34;https://github.com/segmentio/kafka-go&#34; target=&#34;_blank&#34;&gt;github.com/streadway/amqp&lt;/a&gt;库, 包含生产和消费示例代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Rabbitmq 示例代码</title>
      <link>https://momobaba.top/post/go-rabbitmq/</link>
      <pubDate>Sat, 17 Dec 2022 21:30:38 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-rabbitmq/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;Go Rabbitmq 示例代码, 使用github.com/streadway/amqp库, 包含生产和消费示例代码&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang pprof性能分析</title>
      <link>https://momobaba.top/post/golang-pprof/</link>
      <pubDate>Sun, 27 Nov 2022 21:28:51 +0800</pubDate>
      
      <guid>https://momobaba.top/post/golang-pprof/</guid>
      <description>&lt;p&gt;pprof 是 golang 官方提供的性能调优分析工具，可以对程序进行性能分析，并可视化数据，看起来相当的直观。
当你的 go 程序遇到性能瓶颈时，可以使用这个工具来进行调试并优化程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何防止Go Goroutine泄露</title>
      <link>https://momobaba.top/post/go-goroutine-disclosure/</link>
      <pubDate>Wed, 12 Oct 2022 21:40:38 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-goroutine-disclosure/</guid>
      <description>&lt;p&gt;Go的并发模型虽简化了并发程序的开发难度，但如果不了解使用方法，常常会遇到goroutine泄露的问题。我们可以可以从两方面入手解决，一是预防（了解什么样的代码会产生泄露），二是监控（通过Prometheus采集metrics来监控）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Go Goroutine注意事项</title>
      <link>https://momobaba.top/post/go-goroutine/</link>
      <pubDate>Sun, 25 Sep 2022 17:18:02 +0800</pubDate>
      
      <guid>https://momobaba.top/post/go-goroutine/</guid>
      <description>&lt;p&gt;Go的协程使用起来很方便，但是有有些坑需要注意: &lt;!-- raw HTML omitted --&gt;1. 使用goroutine时加上panic recovery机制，避免服务直接不可用 &lt;!-- raw HTML omitted --&gt;2. 不要创建都无法退出的goroutine，会导致goroutine 泄漏&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
